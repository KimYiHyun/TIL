<2주차 주요 개념 키워드>

-협업할 때는 아래의 단계를 따른다.
1단계. 누가 이 작업을 할 것인지 정한다. - Issue
2단계. 각자 맡은 것을 작업한다. - Branch
3단계. 각자 작업을 프로젝트에 합친다. - Merge
(경우에 따라) 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge

1단계.
-issue는 프로젝트에서 해결해야 하는 문제 ex)버그 신고, 기능 추가, 내가 할 작업 등 여러 방식으로 사용
-협업을 하기 위해 issue를 만들어 누가 작업할지 정하고, 브랜치를 만들어 작업할 공간을 나눈다.

2단계.
-Branch는 특정 commit에서 나뭇가지처럼 갈라져나와서 작업할 수 있는 공간이다. 기능별로 이름을 만들어주어 브랜치에 작업해준다.
-현재 작업하는 브랜치를 선택하는 것을 체크아웃이라고 한다. 체크아웃된 브랜치에 커밋이 반영된다. 
-작업 브랜치 = 체크아웃 브랜치가 맞는지 확인하기! commit 전 브랜치명 옆에 O 표시가 되어있는지 확인!
-브랜치 삭제 : 그동안 브랜치에 했던 작업 내역 즉, commit이 모두 사라지는 것. 삭제할 브랜치는 체크아웃(현재 작업 중인) 브랜치가 아니어야 한다.

3단계.
-Merge(병합)는 브랜치를 다른 브랜치에 합치는 것. 즉, 특정 브랜치의 commit들을 다른 브랜치의 commit 내역에 모두 반영하는 것. 개발할 때는 기준이 되는 기본 브랜치를 정해놓고 다른 브랜치들을 기본 브랜치에 merge한다.
-브랜치명은 규칙을 가지고 잘 이름 지으면 프로젝트 관리가 쉽다. 작업이 완료되면 작업한 브랜치는 보통 삭제한다. 나중에 브랜치 설정이 꼬이는 것을 방지한다.
-각 작업 브랜치에서 작업할 때는 다른 브랜치의 영향을 받지 않고 독릭접으로 작업할 수 있다.
-merge하는 과정에서 같은 파일이 동일한 부분이 수정된게 발견되면 merge conflict(병합 충돌)이 발생한다. comflict를 수정하려면 최종적으로 반영할 내역으로 수정 후 merge commit 하면 된다.
-git은 똑똑하게 충돌이 난 내용을 자동으로 파일 내용을 고쳐서 보여준다.


-tracking 한다는 것은 로컬 repo와 원격 repo의 특정 브랜치를 연결해 주는 것이다.
-pull과 push는 기본적으로 tracking(추적)되고 있는 브랜치를 기준으로 commit 내역을 반영.